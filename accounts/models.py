from curses import is_term_resized
from django.db import models
from django.contrib.auth.models import User
import jsonfield

from django.db.models.signals import post_save,pre_save
from django.dispatch import receiver

import math, random

import uuid

import string

from cryptography.fernet import Fernet

from django.contrib.auth.hashers import make_password


# Create your models here.

class BaseModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        abstract=True

class Configuration(models.Model):
    firebase_server_key = models.TextField(blank=True, null=True)
    status = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class Country(BaseModel):
    country_name=models.CharField(max_length=30)
    status=models.IntegerField(default=1)
    def __str__(self):
        return str(self.country_name)
    class Meta:
        verbose_name_plural="Countries"    

class State(BaseModel):
    country=models.ForeignKey(Country,on_delete=models.CASCADE)
    state_name=models.CharField(max_length=40)
    status=models.IntegerField(default=1)
    
    def __str__(self):
        return str(self.state_name)


class City(BaseModel):
    state=models.ForeignKey(State,on_delete=models.CASCADE)
    city_name=models.CharField(max_length=50)
    status=models.IntegerField(default=1)
    def __str__(self):
        return str(self.city_name)

    class Meta:
        verbose_name_plural="Cities"    


 
class Role(BaseModel):
    role_name=models.CharField(max_length=50,blank=True,null=True)
    status = models.IntegerField(default=1)
    def __str__(self):
        return str(self.role_name)

class UserProfile(BaseModel):
    user = models.OneToOneField(User,on_delete=models.CASCADE,related_name='user_profile')  # username meanse unique_code
    mobile_no=models.CharField(max_length=20,blank=True,null=True)
    unique_code=models.CharField(max_length=50)
    is_signup=models.IntegerField(default=1,null=True,blank=True)
    role=models.ForeignKey(Role,on_delete=models.CASCADE,null=True,blank=True)
    company_name=models.CharField(max_length=50,null=True,blank=True)
    organization_code=models.CharField(max_length=100,null=True,blank=True)
    gender=models.CharField(max_length=10,null=True,blank=True)
    designation=models.CharField(max_length=200,null=True,blank=True)
    base_location=models.CharField(max_length=300,null=True,blank=True)
    team_id=models.IntegerField(null=True,blank=True)                      # team_id
    manager_id=models.IntegerField(null=True,blank=True)                   # manager_id 
    default_language=models.CharField(max_length=50,null=True,blank=True)
    member_since=models.CharField(max_length=50,null=True,blank=True)  # date field
    firebase_token = models.CharField(max_length=255, blank=True, null=True)
    last_active_on =models.DateTimeField(null=True,blank=True)
    is_verified_by_admin = models.BooleanField(default=False)
    is_active = models.IntegerField(null=True,blank=True,default=0)
    avatar_image_id = models.IntegerField(null=True,blank=True) 
    device_id = models.CharField(max_length=100, blank=True, null=True)
    
    created_by = models.IntegerField(null=True,blank=True)

    is_updated = models.IntegerField(default=0,null=True,blank=True)

    def __str__(self):
        return str(self.unique_code)+" "+"("+str(self.user.first_name)+" "+str(self.user.last_name)+")"+" "+str(self.role.role_name) +" "+str(self.user.email) +" " +str(self.team_id) + ' |' +str(self.user) +"|" + str(self.id) 

    class Meta:
        verbose_name_plural="User Profiles"    



def generate_random_password():
    
    characters = list(string.ascii_letters + string.digits + "!@#$%^&*()")

    length = 6
        
    random.shuffle(characters)
    password = []

    for i in range(length):
        password.append(random.choice(characters))

    random.shuffle(password)

    password = "".join(password)

    return password



class Organiztaion(BaseModel): 
    organization_name =  models.CharField(max_length = 200)             # Company Name 
    landline_country_code=models.CharField(max_length = 3, null=True)
    landline_state_code=models.CharField(max_length = 6, null=True)
    landline_number=models.CharField(max_length = 20, null=True)
    mobile_country_code=models.CharField(max_length = 6, null=True)
    organization_code=models.CharField(max_length = 20, null=True)
    unique_code=models.CharField(max_length=100)                        # Unique code generated by Super Admin  
    mobile_number=models.CharField(max_length = 10, null=True)
    email=models.CharField(max_length = 50, null=True)
    
    password=models.CharField(max_length=5000,null=True,blank=True)

    address=models.CharField(max_length = 500, null=True)         # Base location
    country=models.ForeignKey(Country,on_delete=models.CASCADE)
    state=models.ForeignKey(State,on_delete=models.CASCADE)
    city=models.ForeignKey(City,on_delete=models.CASCADE)
    pincode=models.CharField(max_length = 6, null=True)
    status=models.IntegerField(default=1)
    json_field=jsonfield.JSONField()

    def __str__(self):
            return str(self.organization_name) + '|  ' + str(self.id) 

    class Meta:
        verbose_name_plural="Organizations"



@receiver(pre_save, sender=Organiztaion)
def update_password(sender, instance=None,created=False,**kwargs):
    random_password = generate_random_password()

    password = make_password(random_password)
     
    instance.password = password

    
class PasswordResetOTP(BaseModel):
    email = models.CharField(max_length=100,blank=True, null=True)
    mobile = models.CharField(max_length=10,blank=True, null=True)
    otp = models.CharField(max_length=50,blank=True, null=True)

